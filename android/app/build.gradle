apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
apply plugin: "com.facebook.react"

project.ext.envConfigFiles = [
        developmentdebug: ".env",
        developmentrelease: ".env",
        stagingdebug: ".env.staging",
        stagingrelease: ".env.staging",
        prereleasedebug: ".env.prerelease",
        prereleaserelease: ".env.prerelease",
        productiondebug: ".env.production",
        productionrelease: ".env.production",
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []
    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
    //
    // Added by install-expo-modules
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", rootDir.getAbsoluteFile().getParentFile().getAbsolutePath(), "android", "absolute"].execute(null, rootDir).text.trim())
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.beincom.group"

    defaultConfig {
        configurations.all {
            resolutionStrategy { force 'androidx.browser:browser:1.3.0' }
            resolutionStrategy { force 'androidx.core:core-ktx:1.6.0' }
            resolutionStrategy { force 'androidx.appcompat:appcompat:1.3.1' }
            resolutionStrategy {
                eachDependency {
                    if ((requested.group == "org.jetbrains.kotlin") && (requested.name.startsWith("kotlin-stdlib"))) {
                        useVersion("1.8.0")
                    }
                }
            }
        }
        applicationId project.env.get("APP_ID")
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 37
        versionName project.env.get("APP_VERSION")
        testBuildType System.getProperty('testBuildType', 'debug')  // This will later be used to control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        missingDimensionStrategy 'react-native-camera', 'general'
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        resValue "string", "build_config_package", "com.beincom.group"
        resValue "string", "app_name", project.env.get("APP_NAME")
        manifestPlaceholders.beinChatId = project.env.get("APP_CHAT_PACKAGE_NAME_ANDROID")
        manifestPlaceholders.selfHost = project.env.get("SELF_DOMAIN")
        manifestPlaceholders.scheme = project.env.get("URL_SCHEME")
        manifestPlaceholders.chatScheme = project.env.get("CHAT_URL_SCHEME")
    }
    signingConfigs {
        dev {
            storeFile file('development.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        stg {
            storeFile file('staging.keystore')
            storePassword 'Ts3N3G6nEPs$'
            keyAlias 'bic-staging'
            keyPassword 'Ts3N3G6nEPs$'
        }
        pre {
            storeFile file('prerelease.keystore')
            storePassword '8jn@go@BfaKz'
            keyAlias 'bic-prerelease'
            keyPassword '8jn@go@BfaKz'
        }
        pro {
            storeFile file('production.keystore')
            storePassword 'DtNX#a7gLLB4'
            keyAlias 'bic'
            keyPassword 'DtNX#a7gLLB4'
        }
    }

    flavorDimensions "version"

    productFlavors {
        development {
            dimension "version"
            versionNameSuffix ""
            resValue "string", "CodePushDeploymentKey", ""
        }
        staging {
            dimension "version"
            versionNameSuffix ""
            resValue "string", "CodePushDeploymentKey", "n47pDS6lrKq_xZaIXdD8fRWeIEBJelpxBS_4u"
        }
        prerelease {
            dimension "version"
            versionNameSuffix ""
            resValue "string", "CodePushDeploymentKey", "GNX4ZW1YN1C8S1lfDQUjjjsmHsgMee96U-2Kc"
        }
        production {
            dimension "version"
            versionNameSuffix ""
            resValue "string", "CodePushDeploymentKey", "cUer65Va2Lji3WV_-QRJUaedmsssBh-R41wCv"
        }
    }
    buildTypes {
        debug {
            signingConfig null
            productFlavors.development.signingConfig signingConfigs.dev
            productFlavors.staging.signingConfig signingConfigs.stg
            productFlavors.prerelease.signingConfig signingConfigs.pre
            productFlavors.production.signingConfig signingConfigs.pro
        }
        release {
            productFlavors.development.signingConfig signingConfigs.dev
            productFlavors.staging.signingConfig signingConfigs.stg
            productFlavors.prerelease.signingConfig signingConfigs.pre
            productFlavors.production.signingConfig signingConfigs.pro
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'androidx.core:core-splashscreen:1.0.0'
    implementation project(':react-native-config')

    androidTestImplementation('com.wix:detox:+')

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)