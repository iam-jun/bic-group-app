// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ButtonDanger conponent renders correctly 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
      },
      undefined,
    ]
  }
  testID="button_icon"
>
  <View
    accessible={true}
    collapsable={false}
    focusable={false}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": undefined,
        "borderRadius": 4,
        "height": 36,
        "justifyContent": "center",
        "opacity": 1,
        "width": 36,
      }
    }
    testID="button_icon.test"
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "center",
          },
          undefined,
        ]
      }
      testID="button_wrapper.content"
    >
      <View
        accessibilityState={
          Object {
            "disabled": true,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={false}
        hitSlop={
          Object {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
              },
              Object {
                "marginHorizontal": 8,
              },
              Object {
                "backgroundColor": undefined,
              },
            ]
          }
        >
          <View
            style={
              Array [
                undefined,
                undefined,
                undefined,
              ]
            }
          >
            <View
              testID="button_wrapper.icon"
            />
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`ButtonDanger conponent renders label correctly 1`] = `
<View
  style={
    Array [
      Object {
        "alignItems": "center",
      },
      undefined,
    ]
  }
  testID="button_icon"
>
  <View
    accessible={true}
    collapsable={false}
    focusable={false}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": undefined,
        "borderRadius": 4,
        "height": 36,
        "justifyContent": "center",
        "opacity": 1,
        "width": 36,
      }
    }
    testID="button_icon.test"
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "flexDirection": "row",
            "justifyContent": "center",
          },
          undefined,
        ]
      }
      testID="button_wrapper.content"
    >
      <View
        accessibilityState={
          Object {
            "disabled": true,
          }
        }
        accessible={true}
        collapsable={false}
        focusable={false}
        hitSlop={
          Object {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
              },
              Object {
                "marginHorizontal": 8,
              },
              Object {
                "backgroundColor": undefined,
              },
            ]
          }
        >
          <View
            style={
              Array [
                undefined,
                undefined,
                undefined,
              ]
            }
          >
            <View
              testID="button_wrapper.icon"
            />
          </View>
        </View>
      </View>
    </View>
  </View>
  <Text
    style={
      Array [
        Object {
          "color": undefined,
          "fontFamily": "BeVietnamPro-Medium",
          "fontSize": 13,
        },
        Object {},
        Object {
          "marginTop": 8,
          "textAlign": "center",
        },
      ]
    }
    testID="button_icon.label"
  >
    BUTTON ICON
  </Text>
</View>
`;
