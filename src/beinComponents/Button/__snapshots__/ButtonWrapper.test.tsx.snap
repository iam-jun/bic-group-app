// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button Wrapper component render correctly TouchableComponent 1`] = `
<RNGestureHandlerButton
  collapsable={false}
  onGestureEvent={[Function]}
  onGestureHandlerEvent={[Function]}
  onGestureHandlerStateChange={[Function]}
  onHandlerStateChange={[Function]}
  rippleColor={0}
  testID="button_wrapper"
>
  <View
    accessible={true}
    collapsable={false}
    style={Object {}}
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
      testID="button_wrapper.content"
    />
  </View>
</RNGestureHandlerButton>
`;

exports[`Button Wrapper component render correctly hitSlop 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 10,
      "right": 10,
      "top": 10,
    }
  }
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID="button_wrapper"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  />
</View>
`;

exports[`Button Wrapper component renders correctly 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  />
</View>
`;

exports[`Button Wrapper component renders correctly button disable 1`] = `
<View
  accessibilityState={
    Object {
      "disabled": true,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID="button_wrapper"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  />
</View>
`;

exports[`Button Wrapper component renders correctly children 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            undefined,
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View
            testID="button_wrapper.children"
          >
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={20}
              bbWidth={20}
              color={4281284933}
              focusable={false}
              height={20}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 20,
                    "width": 20,
                  },
                ]
              }
              tintColor={4281284933}
              vbHeight={24}
              vbWidth={24}
              width={20}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M12 10a2 2 0 102 2 2 2 0 00-2-2zm-7 0a2 2 0 102 2 2 2 0 00-2-2zm14 0a2 2 0 102 2 2 2 0 00-2-2z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Button Wrapper component renders correctly children with useI18n 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  >
    <Text
      style={
        Array [
          Object {
            "color": "#2F3945",
            "fontFamily": "OpenSans-SemiBold",
            "fontSize": 16,
          },
          Object {},
          Object {
            "textAlign": "center",
          },
        ]
      }
    />
  </View>
</View>
`;

exports[`Button Wrapper component renders correctly contentStyle 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "blue",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  />
</View>
`;

exports[`Button Wrapper component renders correctly style 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "backgroundColor": "blue",
      "opacity": 1,
    }
  }
  testID="button_wrapper"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  />
</View>
`;

exports[`Button Wrapper component renders correctly testID 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID="button_wrapper"
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  />
</View>
`;

exports[`Button Wrapper component should render leftIcon 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            Object {
              "marginHorizontal": 8,
            },
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View
            testID="button_wrapper.icon"
          >
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={20}
              bbWidth={20}
              color={4281284933}
              data-name="Layer 1"
              focusable={false}
              height={20}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 20,
                    "width": 20,
                  },
                ]
              }
              tintColor={4281284933}
              vbHeight={24}
              vbWidth={24}
              width={20}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M12 19a1 1 0 10-1-1 1 1 0 001 1zm5 0a1 1 0 10-1-1 1 1 0 001 1zm0-4a1 1 0 10-1-1 1 1 0 001 1zm-5 0a1 1 0 10-1-1 1 1 0 001 1zm7-12h-1V2a1 1 0 00-2 0v1H8V2a1 1 0 00-2 0v1H5a3 3 0 00-3 3v14a3 3 0 003 3h14a3 3 0 003-3V6a3 3 0 00-3-3zm1 17a1 1 0 01-1 1H5a1 1 0 01-1-1v-9h16zm0-11H4V6a1 1 0 011-1h1v1a1 1 0 002 0V5h8v1a1 1 0 002 0V5h1a1 1 0 011 1zM7 15a1 1 0 10-1-1 1 1 0 001 1zm0 4a1 1 0 10-1-1 1 1 0 001 1z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Button Wrapper component should render leftIcon with leftIconProps 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            Object {
              "marginHorizontal": 8,
            },
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View
            testID="LEFT_ICON"
          >
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={20}
              bbWidth={20}
              color={4281284933}
              focusable={false}
              height={20}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 20,
                    "width": 20,
                  },
                ]
              }
              tintColor={4281284933}
              vbHeight={24}
              vbWidth={24}
              width={20}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M15.54 11.29L9.88 5.64a1 1 0 00-1.42 0 1 1 0 000 1.41l4.95 5L8.46 17a1 1 0 000 1.41 1 1 0 00.71.3 1 1 0 00.71-.3l5.66-5.65a1 1 0 000-1.47z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Button Wrapper component should render rightIcon 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            Object {
              "marginHorizontal": 8,
            },
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View
            testID="button_wrapper.icon"
          >
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={20}
              bbWidth={20}
              color={4281284933}
              data-name="Layer 1"
              focusable={false}
              height={20}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 20,
                    "width": 20,
                  },
                ]
              }
              tintColor={4281284933}
              vbHeight={24}
              vbWidth={24}
              width={20}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M12 19a1 1 0 10-1-1 1 1 0 001 1zm5 0a1 1 0 10-1-1 1 1 0 001 1zm0-4a1 1 0 10-1-1 1 1 0 001 1zm-5 0a1 1 0 10-1-1 1 1 0 001 1zm7-12h-1V2a1 1 0 00-2 0v1H8V2a1 1 0 00-2 0v1H5a3 3 0 00-3 3v14a3 3 0 003 3h14a3 3 0 003-3V6a3 3 0 00-3-3zm1 17a1 1 0 01-1 1H5a1 1 0 01-1-1v-9h16zm0-11H4V6a1 1 0 011-1h1v1a1 1 0 002 0V5h8v1a1 1 0 002 0V5h1a1 1 0 011 1zM7 15a1 1 0 10-1-1 1 1 0 001 1zm0 4a1 1 0 10-1-1 1 1 0 001 1z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Button Wrapper component should render rightIcon with rightIconProps 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={false}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
      }
    }
    testID="button_wrapper.content"
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            Object {
              "marginHorizontal": 8,
            },
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View
            testID="RIGHT_ICON"
          >
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={20}
              bbWidth={20}
              color={4281284933}
              focusable={false}
              height={20}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 20,
                    "width": 20,
                  },
                ]
              }
              tintColor={4281284933}
              vbHeight={24}
              vbWidth={24}
              width={20}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M15.54 11.29L9.88 5.64a1 1 0 00-1.42 0 1 1 0 000 1.41l4.95 5L8.46 17a1 1 0 000 1.41 1 1 0 00.71.3 1 1 0 00.71-.3l5.66-5.65a1 1 0 000-1.47z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;
