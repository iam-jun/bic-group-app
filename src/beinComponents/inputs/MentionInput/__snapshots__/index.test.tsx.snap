// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MentionInput component renders correctly 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "zIndex": 1,
        },
        null,
      ]
    }
    testID="_mention_input"
  >
    <TextInput
      editable={true}
      keyboardType="default"
      onChangeText={[Function]}
      onContentSizeChange={[Function]}
      onKeyPress={[Function]}
      onSelectionChange={[Function]}
      style={
        Array [
          null,
          Object {},
        ]
      }
      testID="_mention_input.input"
      textInputRef={
        Object {
          "current": undefined,
        }
      }
    />
  </View>,
  <View
    style={
      Array [
        Object {
          "alignSelf": "center",
          "backgroundColor": "#FFFFFF",
          "borderRadius": 6,
          "justifyContent": "center",
          "maxHeight": 80,
          "maxWidth": 355,
          "position": "absolute",
          "top": 20,
          "width": "85%",
          "zIndex": 2,
        },
        undefined,
        Object {
          "elevation": 16,
          "shadowColor": "#000",
          "shadowOffset": Object {
            "height": 12,
            "width": 0,
          },
          "shadowOpacity": 0.12,
          "shadowRadius": 10.32,
        },
        undefined,
        Object {
          "borderWidth": 0,
          "flex": undefined,
          "height": 0,
          "marginBottom": 0,
          "marginTop": 0,
          "paddingBottom": 0,
          "paddingTop": 0,
        },
      ]
    }
    testID="autocomplete"
  >
    <RCTScrollView
      ListEmptyComponent={[Function]}
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="at_mention"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={
            Object {
              "justifyContent": "center",
              "minHeight": 40,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#181C32",
                  "fontFamily": "BeVietnamPro-SemiBold",
                  "fontSize": 15,
                },
                Object {},
                Object {
                  "color": "#A4A9B7",
                  "margin": 8,
                  "padding": 4,
                },
              ]
            }
            testID="at_mention.empty_content"
          />
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`MentionInput component should show "MentionInput" with CommmentInput 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "zIndex": 1,
        },
        null,
      ]
    }
    testID="_mention_input"
  >
    <View>
      <View
        style={
          Array [
            Object {
              "backgroundColor": "#FFFFFF",
              "borderColor": "#EAEDF2",
              "borderTopWidth": 1,
              "paddingBottom": 8,
              "paddingTop": 8,
            },
            Array [
              null,
              Object {},
            ],
          ]
        }
      >
        <View
          style={
            Object {
              "alignItems": "flex-end",
              "flexDirection": "row",
              "paddingBottom": 8,
            }
          }
        >
          <View
            collapsable={false}
            style={
              Object {
                "flex": 1,
                "height": 44,
                "zIndex": 1,
              }
            }
          >
            <TextInput
              autoFocus={false}
              editable={true}
              keyboardType="default"
              multiline={true}
              onChangeText={[Function]}
              onContentSizeChange={[Function]}
              onFocus={[Function]}
              onKeyPress={[Function]}
              onSelectionChange={[Function]}
              placeholder="placeholder"
              placeholderTextColor="#627286"
              selectionColor="#627286"
              style={
                Object {
                  "color": "#2F3945",
                  "fontFamily": "OpenSans-Regular",
                  "fontSize": 16,
                  "lineHeight": 22,
                  "paddingBottom": 8,
                  "paddingHorizontal": 16,
                  "paddingTop": 8,
                  "width": "100%",
                }
              }
              testID="comment_input"
            >
              value
            </TextInput>
          </View>
        </View>
        <View
          style={
            Object {
              "borderColor": "#EAEDF2",
              "borderTopWidth": 1,
            }
          }
        >
          <View
            style={
              Object {
                "backgroundColor": "#FFFFFF",
                "flexDirection": "row",
                "minHeight": 48,
                "paddingLeft": 16,
                "paddingRight": 8,
                "paddingTop": 8,
              }
            }
          >
            <View
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                accessibilityState={
                  Object {
                    "disabled": false,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID="comment_input.btn_file"
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                  testID="button_wrapper.content"
                >
                  <View
                    accessibilityState={
                      Object {
                        "disabled": true,
                      }
                    }
                    accessible={true}
                    collapsable={false}
                    focusable={false}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                      }
                    }
                  >
                    <View
                      style={
                        Array [
                          Object {
                            "alignItems": "center",
                            "flexDirection": "row",
                          },
                          Object {
                            "marginRight": 16,
                          },
                          Object {
                            "backgroundColor": undefined,
                          },
                        ]
                      }
                    >
                      <View
                        style={
                          Array [
                            undefined,
                            undefined,
                            undefined,
                          ]
                        }
                      >
                        <View>
                          <RNSVGSvgView
                            align="xMidYMid"
                            bbHeight={20}
                            bbWidth={20}
                            color={4284641926}
                            focusable={false}
                            height={20}
                            meetOrSlice={0}
                            minX={0}
                            minY={0}
                            style={
                              Array [
                                Object {
                                  "backgroundColor": "transparent",
                                  "borderWidth": 0,
                                },
                                Object {},
                                Object {
                                  "flex": 0,
                                  "height": 20,
                                  "width": 20,
                                },
                              ]
                            }
                            tintColor={4284641926}
                            vbHeight={24}
                            vbWidth={24}
                            width={20}
                          >
                            <RNSVGGroup>
                              <RNSVGPath
                                d="M18.08 12.42l-6.18 6.19a4.25 4.25 0 01-6-6l8-8a2.57 2.57 0 013.54 0 2.52 2.52 0 010 3.54l-6.9 6.89A.75.75 0 119.42 14l5.13-5.12a1 1 0 00-1.42-1.42L8 12.6a2.74 2.74 0 000 3.89 2.82 2.82 0 003.89 0l6.89-6.9a4.5 4.5 0 00-6.36-6.36l-8 8A6.25 6.25 0 0013.31 20l6.19-6.18a1 1 0 10-1.42-1.42z"
                                fill={
                                  Array [
                                    2,
                                  ]
                                }
                                propList={
                                  Array [
                                    "fill",
                                  ]
                                }
                              />
                            </RNSVGGroup>
                          </RNSVGSvgView>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
              <View
                accessibilityState={
                  Object {
                    "disabled": false,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID="comment_input.btn_image"
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                  testID="button_wrapper.content"
                >
                  <View
                    accessibilityState={
                      Object {
                        "disabled": true,
                      }
                    }
                    accessible={true}
                    collapsable={false}
                    focusable={false}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                      }
                    }
                  >
                    <View
                      style={
                        Array [
                          Object {
                            "alignItems": "center",
                            "flexDirection": "row",
                          },
                          Object {
                            "marginRight": 16,
                          },
                          Object {
                            "backgroundColor": undefined,
                          },
                        ]
                      }
                    >
                      <View
                        style={
                          Array [
                            undefined,
                            undefined,
                            undefined,
                          ]
                        }
                      >
                        <View>
                          <RNSVGSvgView
                            align="xMidYMid"
                            bbHeight={18}
                            bbWidth={18}
                            color={4284641926}
                            focusable={false}
                            height={18}
                            meetOrSlice={0}
                            minX={0}
                            minY={0}
                            style={
                              Array [
                                Object {
                                  "backgroundColor": "transparent",
                                  "borderWidth": 0,
                                },
                                Object {},
                                Object {
                                  "flex": 0,
                                  "height": 18,
                                  "width": 18,
                                },
                              ]
                            }
                            tintColor={4284641926}
                            vbHeight={24}
                            vbWidth={24}
                            width={18}
                          >
                            <RNSVGGroup>
                              <RNSVGPath
                                d="M19 2H5a3 3 0 00-3 3v14a3 3 0 003 3h14a2.81 2.81 0 00.49-.05l.3-.07H19.91l.37-.14.13-.07c.1-.06.21-.11.31-.18a3.79 3.79 0 00.38-.32l.07-.09a2.69 2.69 0 00.27-.32l.09-.13a2.31 2.31 0 00.18-.35 1 1 0 00.07-.15c.05-.12.08-.25.12-.38v-.15a2.6 2.6 0 00.1-.6V5a3 3 0 00-3-3zM5 20a1 1 0 01-1-1v-4.31l3.29-3.3a1 1 0 011.42 0l8.6 8.61zm15-1a1 1 0 01-.07.36 1 1 0 01-.08.14.94.94 0 01-.09.12l-5.35-5.35.88-.88a1 1 0 011.42 0l3.29 3.3zm0-5.14L18.12 12a3.08 3.08 0 00-4.24 0l-.88.88L10.12 10a3.08 3.08 0 00-4.24 0L4 11.86V5a1 1 0 011-1h14a1 1 0 011 1z"
                                fill={
                                  Array [
                                    2,
                                  ]
                                }
                                propList={
                                  Array [
                                    "fill",
                                  ]
                                }
                              />
                            </RNSVGGroup>
                          </RNSVGSvgView>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
              <View
                accessibilityState={
                  Object {
                    "disabled": false,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID="comment_input.btn_camera"
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                  testID="button_wrapper.content"
                >
                  <View
                    accessibilityState={
                      Object {
                        "disabled": true,
                      }
                    }
                    accessible={true}
                    collapsable={false}
                    focusable={false}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                      }
                    }
                  >
                    <View
                      style={
                        Array [
                          Object {
                            "alignItems": "center",
                            "flexDirection": "row",
                          },
                          Object {
                            "marginRight": 16,
                          },
                          Object {
                            "backgroundColor": undefined,
                          },
                        ]
                      }
                    >
                      <View
                        style={
                          Array [
                            undefined,
                            undefined,
                            undefined,
                          ]
                        }
                      >
                        <View>
                          <RNSVGSvgView
                            align="xMidYMid"
                            bbHeight={20}
                            bbWidth={20}
                            color={4284641926}
                            focusable={false}
                            height={20}
                            meetOrSlice={0}
                            minX={0}
                            minY={0}
                            style={
                              Array [
                                Object {
                                  "backgroundColor": "transparent",
                                  "borderWidth": 0,
                                },
                                Object {},
                                Object {
                                  "flex": 0,
                                  "height": 20,
                                  "width": 20,
                                },
                              ]
                            }
                            tintColor={4284641926}
                            vbHeight={24}
                            vbWidth={24}
                            width={20}
                          >
                            <RNSVGGroup>
                              <RNSVGPath
                                d="M19 6.5h-1.28l-.32-1a3 3 0 00-2.84-2H9.44A3 3 0 006.6 5.55l-.32 1H5a3 3 0 00-3 3v8a3 3 0 003 3h14a3 3 0 003-3v-8a3 3 0 00-3-3.05zm1 11a1 1 0 01-1 1H5a1 1 0 01-1-1v-8a1 1 0 011-1h2a1 1 0 001-.68l.54-1.64a1 1 0 01.95-.68h5.12a1 1 0 01.95.68l.54 1.64a1 1 0 00.9.68h2a1 1 0 011 1zm-8-9a4 4 0 104 4 4 4 0 00-4-4zm0 6a2 2 0 112-2 2 2 0 01-2 2z"
                                fill={
                                  Array [
                                    2,
                                  ]
                                }
                                propList={
                                  Array [
                                    "fill",
                                  ]
                                }
                              />
                            </RNSVGGroup>
                          </RNSVGSvgView>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
              <View
                accessibilityState={
                  Object {
                    "disabled": false,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={true}
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
                testID="comment_input.btn_emoji"
              >
                <View
                  style={
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                      "justifyContent": "center",
                    }
                  }
                  testID="button_wrapper.content"
                >
                  <View
                    accessibilityState={
                      Object {
                        "disabled": true,
                      }
                    }
                    accessible={true}
                    collapsable={false}
                    focusable={false}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    onClick={[Function]}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Object {
                        "opacity": 1,
                      }
                    }
                  >
                    <View
                      style={
                        Array [
                          Object {
                            "alignItems": "center",
                            "flexDirection": "row",
                          },
                          Object {
                            "marginRight": 16,
                          },
                          Object {
                            "backgroundColor": undefined,
                          },
                        ]
                      }
                    >
                      <View
                        style={
                          Array [
                            undefined,
                            undefined,
                            undefined,
                          ]
                        }
                      >
                        <View>
                          <View
                            onLayout={[Function]}
                            style={
                              Object {
                                "backgroundColor": "transparent",
                                "position": "relative",
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              style={
                                Object {
                                  "bottom": 0,
                                  "left": 0,
                                  "opacity": 1,
                                  "position": "absolute",
                                  "right": 0,
                                  "top": 0,
                                }
                              }
                            >
                              <View
                                style={
                                  Object {
                                    "alignItems": "center",
                                    "backgroundColor": "#f9f9f9",
                                    "height": 20,
                                    "justifyContent": "center",
                                    "width": 20,
                                  }
                                }
                                testID="Image__placeholder"
                              />
                            </View>
                            <View
                              style={
                                Array [
                                  Object {
                                    "overflow": "hidden",
                                  },
                                  Object {
                                    "height": 20,
                                    "width": 20,
                                  },
                                ]
                              }
                            >
                              <FastImageView
                                onFastImageError={[Function]}
                                onFastImageLoadEnd={[Function]}
                                resizeMode="cover"
                                size={20}
                                source={null}
                                style={
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  }
                                }
                              />
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
            <View
              accessibilityState={
                Object {
                  "disabled": false,
                }
              }
              accessible={true}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "backgroundColor": "#A17AF2",
                  "borderRadius": 6,
                  "padding": 8,
                  "paddingLeft": 16,
                }
              }
              testID="comment_input.send"
            >
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                    "justifyContent": "center",
                  }
                }
                testID="button_wrapper.content"
              >
                <Text
                  style={
                    Array [
                      Object {
                        "color": "#2F3945",
                        "fontFamily": "OpenSans-SemiBold",
                        "fontSize": 16,
                      },
                      Object {
                        "color": "#FFFFFF",
                      },
                      Object {
                        "textAlign": "center",
                      },
                    ]
                  }
                >
                  Send
                </Text>
                <View
                  accessibilityState={
                    Object {
                      "disabled": true,
                    }
                  }
                  accessible={true}
                  collapsable={false}
                  focusable={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  onClick={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "opacity": 1,
                    }
                  }
                >
                  <View
                    style={
                      Array [
                        Object {
                          "alignItems": "center",
                          "flexDirection": "row",
                        },
                        Object {
                          "marginHorizontal": 8,
                        },
                        Object {
                          "backgroundColor": undefined,
                        },
                      ]
                    }
                  >
                    <View
                      style={
                        Array [
                          undefined,
                          undefined,
                          undefined,
                        ]
                      }
                    >
                      <View
                        testID="button_wrapper.icon"
                      >
                        <View
                          onLayout={[Function]}
                          style={
                            Object {
                              "backgroundColor": "transparent",
                              "position": "relative",
                            }
                          }
                        >
                          <View
                            collapsable={false}
                            style={
                              Object {
                                "bottom": 0,
                                "left": 0,
                                "opacity": 1,
                                "position": "absolute",
                                "right": 0,
                                "top": 0,
                              }
                            }
                          >
                            <View
                              style={
                                Object {
                                  "alignItems": "center",
                                  "backgroundColor": "#f9f9f9",
                                  "height": 20,
                                  "justifyContent": "center",
                                  "width": 20,
                                }
                              }
                              testID="Image__placeholder"
                            />
                          </View>
                          <View
                            style={
                              Array [
                                Object {
                                  "overflow": "hidden",
                                },
                                Object {
                                  "height": 20,
                                  "width": 20,
                                },
                              ]
                            }
                          >
                            <FastImageView
                              onFastImageError={[Function]}
                              onFastImageLoadEnd={[Function]}
                              resizeMode="cover"
                              size={20}
                              source={null}
                              style={
                                Object {
                                  "bottom": 0,
                                  "left": 0,
                                  "position": "absolute",
                                  "right": 0,
                                  "top": 0,
                                }
                              }
                            />
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
          <View
            style={
              Object {
                "left": 0,
                "opacity": undefined,
                "position": "absolute",
                "right": 0,
              }
            }
            testID="comment_input_footer.mention_bar_container"
          />
        </View>
      </View>
      <View
        collapsable={false}
        style={
          Object {
            "height": 0,
            "width": "100%",
          }
        }
      />
    </View>
  </View>,
  <View
    style={
      Array [
        Object {
          "alignSelf": "center",
          "backgroundColor": "#FFFFFF",
          "borderRadius": 6,
          "justifyContent": "center",
          "maxHeight": 80,
          "maxWidth": 355,
          "position": "absolute",
          "top": 20,
          "width": "85%",
          "zIndex": 2,
        },
        undefined,
        Object {
          "elevation": 16,
          "shadowColor": "#000",
          "shadowOffset": Object {
            "height": 12,
            "width": 0,
          },
          "shadowOpacity": 0.12,
          "shadowRadius": 10.32,
        },
        undefined,
        Object {
          "borderWidth": 0,
          "flex": undefined,
          "height": 0,
          "marginBottom": 0,
          "marginTop": 0,
          "paddingBottom": 0,
          "paddingTop": 0,
        },
      ]
    }
    testID="autocomplete"
  >
    <RCTScrollView
      ListEmptyComponent={[Function]}
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="at_mention"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={
            Object {
              "justifyContent": "center",
              "minHeight": 40,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#2F3945",
                  "fontFamily": "OpenSans-SemiBold",
                  "fontSize": 14,
                },
                Object {},
                Object {
                  "color": "#B2BDCD",
                  "margin": 8,
                  "padding": 4,
                },
              ]
            }
            testID="at_mention.empty_content"
          />
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`MentionInput component should show "MentionInput" with PostInput 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "zIndex": 1,
        },
        null,
      ]
    }
    testID="_mention_input"
  >
    <TextInput
      editable={true}
      keyboardType="default"
      multiline={true}
      onChangeText={[Function]}
      onContentSizeChange={[Function]}
      onKeyPress={[Function]}
      onSelectionChange={[Function]}
      onSubmitEditing={[Function]}
      placeholder="Write your post here..."
      placeholderTextColor="#767D93"
      selectionColor="#767D93"
      style={
        Object {
          "color": "#181C32",
          "flex": 1,
          "fontFamily": "BeVietnamPro-Light",
          "fontSize": 15,
          "margin": 12,
          "padding": 0,
        }
      }
      testID="_mention_input.input"
      textAlignVertical="top"
      textInputRef={
        Object {
          "current": undefined,
        }
      }
    >
      value
    </TextInput>
  </View>,
  <View
    style={
      Array [
        Object {
          "alignSelf": "center",
          "backgroundColor": "#FFFFFF",
          "borderRadius": 6,
          "justifyContent": "center",
          "maxHeight": 80,
          "maxWidth": 355,
          "position": "absolute",
          "top": 20,
          "width": "85%",
          "zIndex": 2,
        },
        undefined,
        Object {
          "elevation": 16,
          "shadowColor": "#000",
          "shadowOffset": Object {
            "height": 12,
            "width": 0,
          },
          "shadowOpacity": 0.12,
          "shadowRadius": 10.32,
        },
        undefined,
        Object {
          "borderWidth": 0,
          "flex": undefined,
          "height": 0,
          "marginBottom": 0,
          "marginTop": 0,
          "paddingBottom": 0,
          "paddingTop": 0,
        },
      ]
    }
    testID="autocomplete"
  >
    <RCTScrollView
      ListEmptyComponent={[Function]}
      data={Array []}
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="at_mention"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={
            Object {
              "justifyContent": "center",
              "minHeight": 40,
            }
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#181C32",
                  "fontFamily": "BeVietnamPro-SemiBold",
                  "fontSize": 15,
                },
                Object {},
                Object {
                  "color": "#A4A9B7",
                  "margin": 8,
                  "padding": 4,
                },
              ]
            }
            testID="at_mention.empty_content"
          />
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;
