// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NewsfeedList component renders correctly with 1 item 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    pointerEvents="box-none"
    style={
      Object {
        "zIndex": 1,
      }
    }
  >
    <View
      accessibilityElementsHidden={false}
      importantForAccessibility="auto"
      onLayout={[Function]}
      pointerEvents="box-none"
      style={null}
    >
      <View
        pointerEvents="box-none"
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "opacity": 1,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "zIndex": 0,
          }
        }
      >
        <View
          style={
            Object {
              "backgroundColor": "rgb(255, 255, 255)",
              "borderBottomColor": "rgb(216, 216, 216)",
              "flex": 1,
              "shadowColor": "rgb(216, 216, 216)",
              "shadowOffset": Object {
                "height": 0.5,
                "width": 0,
              },
              "shadowOpacity": 0.85,
              "shadowRadius": 0,
            }
          }
        />
      </View>
      <View
        pointerEvents="box-none"
        style={
          Object {
            "height": 44,
            "maxHeight": undefined,
            "minHeight": undefined,
            "opacity": undefined,
            "transform": undefined,
          }
        }
      >
        <View
          pointerEvents="none"
          style={
            Object {
              "height": 0,
            }
          }
        />
        <View
          pointerEvents="box-none"
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "row",
              "justifyContent": "center",
            }
          }
        >
          <View
            pointerEvents="box-none"
            style={
              Object {
                "marginHorizontal": 16,
                "opacity": 1,
              }
            }
          >
            <Text
              accessibilityRole="header"
              aria-level="1"
              collapsable={false}
              nativeID="animatedComponent"
              numberOfLines={1}
              onLayout={[Function]}
              style={
                Object {
                  "color": "rgb(28, 28, 30)",
                  "fontSize": 17,
                  "fontWeight": "600",
                }
              }
            >
              MockedScreen
            </Text>
          </View>
        </View>
      </View>
    </View>
  </View>
  <RNSScreenContainer
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RNSScreen
      activityState={2}
      forwardedRef={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    >
      <View
        collapsable={false}
        style={
          Object {
            "opacity": 1,
          }
        }
      />
      <View
        accessibilityElementsHidden={false}
        closing={false}
        gestureVelocityImpact={0.3}
        importantForAccessibility="auto"
        onClose={[Function]}
        onGestureBegin={[Function]}
        onGestureCanceled={[Function]}
        onGestureEnd={[Function]}
        onOpen={[Function]}
        onTransition={[Function]}
        pointerEvents="box-none"
        style={
          Array [
            Object {
              "overflow": undefined,
            },
            Object {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
          ]
        }
        transitionSpec={
          Object {
            "close": Object {
              "animation": "spring",
              "config": Object {
                "damping": 500,
                "mass": 3,
                "overshootClamping": true,
                "restDisplacementThreshold": 10,
                "restSpeedThreshold": 10,
                "stiffness": 1000,
              },
            },
            "open": Object {
              "animation": "spring",
              "config": Object {
                "damping": 500,
                "mass": 3,
                "overshootClamping": true,
                "restDisplacementThreshold": 10,
                "restSpeedThreshold": 10,
                "stiffness": 1000,
              },
            },
          }
        }
      >
        <View
          collapsable={false}
          nativeID="animatedComponent"
          needsOffscreenAlphaCompositing={false}
          pointerEvents="box-none"
          style={
            Object {
              "flex": 1,
            }
          }
        >
          <View
            collapsable={false}
            forwardedRef={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            style={
              Object {
                "flex": 1,
                "transform": Array [
                  Object {
                    "translateX": 0,
                  },
                  Object {
                    "translateX": 0,
                  },
                ],
              }
            }
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "backgroundColor": "rgb(242, 242, 242)",
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "shadowColor": "#000",
                  "shadowOffset": Object {
                    "height": 1,
                    "width": -1,
                  },
                  "shadowOpacity": 0.3,
                  "shadowRadius": 5,
                  "top": 0,
                  "width": 3,
                }
              }
            />
            <View
              style={
                Array [
                  Object {
                    "flex": 1,
                    "overflow": "hidden",
                  },
                  Array [
                    Object {
                      "backgroundColor": "rgb(242, 242, 242)",
                    },
                    undefined,
                  ],
                ]
              }
            >
              <View
                style={
                  Object {
                    "flex": 1,
                    "flexDirection": "column-reverse",
                  }
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                    }
                  }
                >
                  <View
                    onLayout={[Function]}
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                    testID="newsfeed_list"
                  >
                    <RCTScrollView
                      canChangeSize={false}
                      contentHeight={0}
                      contentWidth={0}
                      dataProvider={
                        DataProvider {
                          "_data": Array [
                            Object {
                              "actor": Object {
                                "avatar": "https://bein-entity-attribute-sandbox.s3.ap-southeast-1.amazonaws.com/user/avatar/images/original/a0f2b4bb-abf7-423d-9fed-0b706751b323.jpg",
                                "fullname": "Nguyễn Thị Ngọc Linh",
                                "id": 33,
                                "username": "ngoclinh",
                              },
                              "audience": Object {
                                "groups": Array [
                                  Object {
                                    "child": Array [
                                      139,
                                      2,
                                      10,
                                      152,
                                      66,
                                      67,
                                      103,
                                      2,
                                      2,
                                    ],
                                    "icon": "https://bein-entity-attribute-stg.s3.ap-southeast-1.amazonaws.com/group/avatar/Avatar_Group.png",
                                    "id": 1,
                                    "name": "EVOL Community",
                                  },
                                ],
                              },
                              "commentsCount": 0,
                              "content": "Important post",
                              "createdAt": "2022-04-20T10:06:45.649Z",
                              "createdBy": 33,
                              "id": 29,
                              "isDraft": false,
                              "media": Object {
                                "files": Array [],
                                "images": Array [],
                                "videos": Array [],
                              },
                              "mentions": Array [],
                              "ownerReactions": Array [],
                              "reactionsCount": Object {},
                              "setting": Object {
                                "canComment": true,
                                "canReact": true,
                                "canShare": true,
                                "importantExpiredAt": "2022-04-20T11:07:08.129Z",
                                "isImportant": true,
                              },
                            },
                          ],
                          "_firstIndexToProcess": 0,
                          "_hasStableIds": true,
                          "_requiresDataChangeHandling": false,
                          "_size": 1,
                          "getStableId": [Function],
                          "rowHasChanged": [Function],
                        }
                      }
                      disableRecycling={false}
                      externalScrollView={[Function]}
                      forceNonDeterministicRendering={true}
                      horizontal={false}
                      initialOffset={0}
                      initialRenderIndex={0}
                      isHorizontal={false}
                      layoutProvider={
                        LayoutProvider {
                          "_getLayoutTypeForIndex": [Function],
                          "_setLayoutForType": [Function],
                          "_tempDim": Object {
                            "height": 0,
                            "width": 0,
                          },
                          "shouldRefreshWithAnchoring": true,
                        }
                      }
                      onEndReached={[Function]}
                      onEndReachedThreshold={2668}
                      onItemLayout={[Function]}
                      onLayout={[Function]}
                      onScroll={[Function]}
                      onSizeChanged={[Function]}
                      onVisibleIndicesChanged={[Function]}
                      refreshControl={
                        <RefreshControlMock
                          onRefresh={[Function]}
                          progressViewOffset={60}
                          refreshing={false}
                          testID="newsfeed_list.refresh_control"
                        />
                      }
                      removeClippedSubviews={false}
                      renderAheadOffset={1334}
                      renderFooter={[Function]}
                      rowRenderer={[Function]}
                      scrollEventThrottle={16}
                      scrollThrottle={16}
                      scrollViewProps={
                        Object {
                          "refreshControl": <RefreshControlMock
                            onRefresh={[Function]}
                            progressViewOffset={60}
                            refreshing={false}
                            testID="newsfeed_list.refresh_control"
                          />,
                        }
                      }
                      testID="newsfeed_list.list"
                    >
                      <RCTRefreshControl />
                      <View>
                        <View
                          style={
                            Object {
                              "flexDirection": "column",
                            }
                          }
                        >
                          <View
                            horizontal={false}
                            scrollOffset={0}
                            style={
                              Object {
                                "height": 0,
                                "width": 0,
                              }
                            }
                            windowSize={1334}
                          />
                          <View
                            style={
                              Object {
                                "alignItems": "center",
                                "justifyContent": "center",
                                "minHeight": 150,
                                "paddingVertical": 16,
                              }
                            }
                          >
                            <View
                              onLayout={[Function]}
                              style={
                                Object {
                                  "backgroundColor": "transparent",
                                  "position": "relative",
                                }
                              }
                            >
                              <View
                                style={
                                  Object {
                                    "bottom": 0,
                                    "left": 0,
                                    "opacity": 1,
                                    "position": "absolute",
                                    "right": 0,
                                    "top": 0,
                                  }
                                }
                              >
                                <View
                                  style={
                                    Object {
                                      "alignItems": "center",
                                      "backgroundColor": "#f9f9f9",
                                      "height": 320,
                                      "justifyContent": "center",
                                      "marginBottom": 16,
                                      "marginTop": 12,
                                      "maxHeight": 160,
                                      "maxWidth": 240,
                                      "width": 480,
                                    }
                                  }
                                  testID="Image__placeholder"
                                />
                              </View>
                              <View
                                style={
                                  Array [
                                    Object {
                                      "overflow": "hidden",
                                    },
                                    Object {
                                      "height": 320,
                                      "marginBottom": 16,
                                      "marginTop": 12,
                                      "maxHeight": 160,
                                      "maxWidth": 240,
                                      "width": 480,
                                    },
                                  ]
                                }
                              >
                                <FastImageView
                                  onFastImageError={[Function]}
                                  onFastImageLoadEnd={[Function]}
                                  resizeMode="contain"
                                  source={
                                    Object {
                                      "testUri": "../../../assets/images/img_empty_cant_load_more.png",
                                    }
                                  }
                                  style={
                                    Object {
                                      "bottom": 0,
                                      "left": 0,
                                      "position": "absolute",
                                      "right": 0,
                                      "top": 0,
                                    }
                                  }
                                />
                              </View>
                            </View>
                            <Text
                              style={
                                Object {
                                  "color": "#2F3945",
                                  "fontFamily": "OpenSans-SemiBold",
                                  "fontSize": 14,
                                }
                              }
                            >
                              You have seen it all
                            </Text>
                            <Text
                              style={
                                Object {
                                  "color": "#627286",
                                  "fontFamily": "OpenSans-Regular",
                                  "fontSize": 12,
                                  "marginBottom": 16,
                                }
                              }
                            >
                              Take a break time & chill
                            </Text>
                          </View>
                        </View>
                      </View>
                    </RCTScrollView>
                    <View
                      animatedStyle={
                        Object {
                          "value": Object {
                            "bottom": -50,
                            "opacity": 0,
                            "position": "absolute",
                            "right": 8,
                          },
                        }
                      }
                      collapsable={false}
                      style={
                        Object {
                          "bottom": -50,
                          "opacity": 0,
                          "position": "absolute",
                          "right": 8,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        focusable={true}
                        onClick={[Function]}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "alignItems": "center",
                            "backgroundColor": "#421187",
                            "borderRadius": 4,
                            "height": 44,
                            "justifyContent": "center",
                            "opacity": 1,
                            "width": 44,
                          }
                        }
                      >
                        <View
                          style={
                            Object {
                              "alignItems": "center",
                              "flexDirection": "row",
                              "justifyContent": "center",
                            }
                          }
                          testID="button_wrapper.content"
                        >
                          <View
                            accessibilityState={
                              Object {
                                "disabled": true,
                              }
                            }
                            accessible={true}
                            focusable={false}
                            hitSlop={
                              Object {
                                "bottom": 10,
                                "left": 10,
                                "right": 10,
                                "top": 10,
                              }
                            }
                            onClick={[Function]}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={
                              Object {
                                "opacity": 1,
                              }
                            }
                          >
                            <View
                              style={
                                Array [
                                  Object {
                                    "alignItems": "center",
                                    "flexDirection": "row",
                                  },
                                  undefined,
                                  Object {
                                    "backgroundColor": undefined,
                                  },
                                ]
                              }
                            >
                              <View
                                style={
                                  Array [
                                    undefined,
                                    undefined,
                                    undefined,
                                  ]
                                }
                              >
                                <View
                                  className="icon-wrapper"
                                >
                                  <RNSVGSvgView
                                    align="xMidYMid"
                                    bbHeight={20}
                                    bbWidth={20}
                                    fill="#FFFFFF"
                                    focusable={false}
                                    height={20}
                                    meetOrSlice={0}
                                    minX={0}
                                    minY={0}
                                    style={
                                      Array [
                                        Object {
                                          "backgroundColor": "transparent",
                                          "borderWidth": 0,
                                        },
                                        Object {},
                                        Object {
                                          "flex": 0,
                                          "height": 20,
                                          "width": 20,
                                        },
                                      ]
                                    }
                                    vbHeight={24}
                                    vbWidth={24}
                                    width={20}
                                  >
                                    <RNSVGGroup
                                      fill={4294967295}
                                      propList={
                                        Array [
                                          "fill",
                                        ]
                                      }
                                    >
                                      <RNSVGPath
                                        d="M21,12a1,1,0,0,0-1,1v6a1,1,0,0,1-1,1H5a1,1,0,0,1-1-1V5A1,1,0,0,1,5,4h6a1,1,0,0,0,0-2H5A3,3,0,0,0,2,5V19a3,3,0,0,0,3,3H19a3,3,0,0,0,3-3V13A1,1,0,0,0,21,12ZM6,12.76V17a1,1,0,0,0,1,1h4.24a1,1,0,0,0,.71-.29l6.92-6.93h0L21.71,8a1,1,0,0,0,0-1.42L17.47,2.29a1,1,0,0,0-1.42,0L13.23,5.12h0L6.29,12.05A1,1,0,0,0,6,12.76ZM16.76,4.41l2.83,2.83L18.17,8.66,15.34,5.83ZM8,13.17l5.93-5.93,2.83,2.83L10.83,16H8Z"
                                      />
                                    </RNSVGGroup>
                                  </RNSVGSvgView>
                                </View>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RNSScreen>
  </RNSScreenContainer>
</View>
`;
