// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditName conponent renders correctly 1`] = `
<View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "paddingTop": 8,
      }
    }
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            Object {
              "marginRight": 8,
            },
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View>
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={24}
              bbWidth={24}
              color={4286071773}
              data-name="Layer 1"
              focusable={false}
              height={24}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 24,
                    "width": 24,
                  },
                ]
              }
              tintColor={4286071773}
              vbHeight={24}
              vbWidth={24}
              width={24}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M16 6a1 1 0 00-1-1H3a1 1 0 000 2h5v11a1 1 0 002 0V7h5a1 1 0 001-1zm5 5h-6a1 1 0 000 2h2v5a1 1 0 002 0v-5h2a1 1 0 000-2z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
    <Text
      style={
        Array [
          Object {
            "color": "#2F3945",
            "fontFamily": "OpenSans-SemiBold",
            "fontSize": 16,
          },
          Object {},
          undefined,
        ]
      }
    >
      Name
    </Text>
  </View>
  <View
    style={
      Array [
        Object {
          "marginVertical": 4,
        },
        Object {},
      ]
    }
    testID="text_input"
  >
    <RCTSinglelineTextInputView
      accessible={true}
      activeOutlineColor="#7843DD"
      allowFontScaling={true}
      blurOnSubmit={true}
      dense={true}
      error={false}
      focusable={true}
      forwardedRef={null}
      maxLength={100}
      mode="outlined"
      mostRecentEventCount={0}
      onBlur={[Function]}
      onChange={[Function]}
      onChangeSync={null}
      onChangeText={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onScroll={[Function]}
      onSelectionChange={[Function]}
      onSelectionChangeShouldSetResponder={[Function]}
      onStartShouldSetResponder={[Function]}
      outlineColor="#B2BDCD"
      placeholderTextColor="#627286"
      rejectResponderTermination={true}
      selection={null}
      selectionColor="#627286"
      style={
        Array [
          Object {},
          undefined,
        ]
      }
      testID="edit_name.text_input"
      text="Test Name"
      theme={
        Object {
          "colors": Object {
            "background": "#FFFFFF",
            "placeholder": "#627286",
            "primary": "#B2BDCD",
            "text": "#2F3945",
          },
          "fonts": Object {
            "regular": Object {
              "fontFamily": "OpenSans-Regular",
            },
          },
          "roundness": 6,
        }
      }
      underlineColorAndroid="transparent"
      value="Test Name"
    />
  </View>
</View>
`;

exports[`EditName conponent should show helperContent when error=true 1`] = `
<View>
  <View
    style={
      Object {
        "flexDirection": "row",
        "paddingTop": 8,
      }
    }
  >
    <View
      accessibilityState={
        Object {
          "disabled": true,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 10,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
            },
            Object {
              "marginRight": 8,
            },
            Object {
              "backgroundColor": undefined,
            },
          ]
        }
      >
        <View
          style={
            Array [
              undefined,
              undefined,
              undefined,
            ]
          }
        >
          <View>
            <RNSVGSvgView
              align="xMidYMid"
              bbHeight={24}
              bbWidth={24}
              color={4286071773}
              data-name="Layer 1"
              focusable={false}
              height={24}
              meetOrSlice={0}
              minX={0}
              minY={0}
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {},
                  Object {
                    "flex": 0,
                    "height": 24,
                    "width": 24,
                  },
                ]
              }
              tintColor={4286071773}
              vbHeight={24}
              vbWidth={24}
              width={24}
            >
              <RNSVGGroup>
                <RNSVGPath
                  d="M16 6a1 1 0 00-1-1H3a1 1 0 000 2h5v11a1 1 0 002 0V7h5a1 1 0 001-1zm5 5h-6a1 1 0 000 2h2v5a1 1 0 002 0v-5h2a1 1 0 000-2z"
                  fill={
                    Array [
                      2,
                    ]
                  }
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                />
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
      </View>
    </View>
    <Text
      style={
        Array [
          Object {
            "color": "#2F3945",
            "fontFamily": "OpenSans-SemiBold",
            "fontSize": 16,
          },
          Object {},
          undefined,
        ]
      }
    >
      Name
    </Text>
  </View>
  <View
    style={
      Array [
        Object {
          "marginVertical": 4,
        },
        Object {},
      ]
    }
    testID="text_input"
  >
    <RCTSinglelineTextInputView
      accessible={true}
      activeOutlineColor="#7843DD"
      allowFontScaling={true}
      blurOnSubmit={true}
      dense={true}
      error={true}
      focusable={true}
      forwardedRef={null}
      maxLength={100}
      mode="outlined"
      mostRecentEventCount={0}
      onBlur={[Function]}
      onChange={[Function]}
      onChangeSync={null}
      onChangeText={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onScroll={[Function]}
      onSelectionChange={[Function]}
      onSelectionChangeShouldSetResponder={[Function]}
      onStartShouldSetResponder={[Function]}
      outlineColor="#B2BDCD"
      placeholderTextColor="#627286"
      rejectResponderTermination={true}
      selection={null}
      selectionColor="#627286"
      style={
        Array [
          Object {},
          undefined,
        ]
      }
      testID="edit_name.text_input"
      text="Test Name"
      theme={
        Object {
          "colors": Object {
            "background": "#FFFFFF",
            "placeholder": "#627286",
            "primary": "#B2BDCD",
            "text": "#DD2C3E",
          },
          "fonts": Object {
            "regular": Object {
              "fontFamily": "OpenSans-Regular",
            },
          },
          "roundness": 6,
        }
      }
      underlineColorAndroid="transparent"
      value="Test Name"
    />
    <Text
      style={
        Array [
          Object {
            "color": "#2F3945",
            "fontFamily": "OpenSans-Regular",
            "fontSize": 12,
          },
          Object {
            "color": "#DD2C3E",
          },
          undefined,
        ]
      }
      testID="text_input.text_helper"
    >
      Name must not be empty
    </Text>
  </View>
</View>
`;
