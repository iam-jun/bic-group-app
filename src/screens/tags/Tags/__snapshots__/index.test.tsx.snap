// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tags screen render correctly with default state 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      Object {
        "paddingBottom": 0,
      },
    ]
  }
>
  <View
    style={
      Object {
        "backgroundColor": "#EAEDF2",
        "flex": 1,
      }
    }
  >
    <View
      style={
        Object {
          "zIndex": 2,
        }
      }
      testID="header"
    >
      <View
        style={
          Array [
            Object {
              "alignItems": "flex-end",
              "backgroundColor": "#FFFFFF",
              "flexDirection": "row",
              "minHeight": 44,
              "paddingTop": 0,
              "paddingVertical": 4,
            },
            Object {
              "elevation": 2,
              "shadowColor": "rgba(0, 0, 0, 1)",
              "shadowOffset": Object {
                "height": 2,
                "width": 0,
              },
              "shadowOpacity": 0.12,
              "shadowRadius": 1.5,
            },
            undefined,
          ]
        }
        testID="header.content"
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#FFFFFF",
              "flex": 1,
              "flexDirection": "row",
              "overflow": "hidden",
              "paddingLeft": 8,
              "paddingRight": 8,
            }
          }
        >
          <View
            accessibilityState={
              Object {
                "disabled": false,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            hitSlop={
              Object {
                "bottom": 20,
                "left": 20,
                "right": 20,
                "top": 20,
              }
            }
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="header.back.button"
          >
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                  },
                  Object {
                    "alignItems": "center",
                    "height": 44,
                    "justifyContent": "center",
                    "padding": 12,
                    "width": 44,
                  },
                  Object {
                    "backgroundColor": undefined,
                  },
                ]
              }
            >
              <View
                style={
                  Array [
                    undefined,
                    undefined,
                    undefined,
                  ]
                }
              >
                <View
                  testID="header.back"
                />
              </View>
            </View>
          </View>
          <View
            style={
              Array [
                Object {
                  "flex": 1,
                  "justifyContent": "center",
                  "paddingVertical": 8,
                },
                Object {},
              ]
            }
          />
        </View>
        <View
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "height": 0,
              "position": "absolute",
              "top": 0,
              "width": "100%",
            }
          }
        />
      </View>
    </View>
    <View
      style={
        Object {
          "height": 16,
          "paddingHorizontal": undefined,
          "paddingVertical": undefined,
          "width": undefined,
        }
      }
    />
    <View
      style={
        Object {
          "backgroundColor": "#FFFFFF",
          "flex": 1,
          "paddingVertical": 8,
        }
      }
    >
      <View
        style={
          Object {
            "borderBottomColor": "#E3E6F2",
            "borderBottomWidth": 1,
            "marginHorizontal": 16,
            "paddingBottom": 4,
          }
        }
      >
        <Text
          style={
            Array [
              Object {
                "color": "#181C32",
                "fontFamily": "BeVietnamPro-SemiBold",
                "fontSize": 17,
              },
              Object {
                "color": "#181C32",
              },
              undefined,
            ]
          }
        >
          Tags
        </Text>
      </View>
      <RCTScrollView
        ListEmptyComponent={[Function]}
        ListFooterComponent={[Function]}
        contentContainerStyle={
          Object {
            "paddingHorizontal": 16,
          }
        }
        data={Array []}
        getItem={[Function]}
        getItemCount={[Function]}
        keyExtractor={[Function]}
        onContentSizeChange={[Function]}
        onEndReached={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        refreshControl={
          <RefreshControlMock
            onRefresh={[Function]}
            refreshing={false}
            tintColor="#A4A9B7"
          />
        }
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsVerticalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        viewabilityConfigCallbackPairs={Array []}
      >
        <RCTRefreshControl />
        <View>
          <View
            onLayout={[Function]}
          />
        </View>
      </RCTScrollView>
    </View>
  </View>
</View>
`;
