// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreateArticleCover should render correctly if cover is empty 1`] = `
<RNSScreenStack
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNSScreen
    collapsable={false}
    forwardedRef={[Function]}
    gestureResponseDistance={
      Object {
        "bottom": -1,
        "end": -1,
        "start": -1,
        "top": -1,
      }
    }
    nativeBackButtonDismissalEnabled={false}
    onAppear={[Function]}
    onDisappear={[Function]}
    onDismissed={[Function]}
    onHeaderBackButtonClicked={[Function]}
    onTransitionProgress={[Function]}
    onWillAppear={[Function]}
    onWillDisappear={[Function]}
    replaceAnimation="pop"
    stackPresentation="push"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    swipeDirection="horizontal"
  >
    <RNSScreenStackHeaderConfig
      backgroundColor="rgb(255, 255, 255)"
      color="rgb(0, 122, 255)"
      hidden={false}
      onAttached={[Function]}
      onDetached={[Function]}
      title="MockedScreen"
      titleColor="rgb(28, 28, 30)"
      topInsetEnabled={true}
      translucent={false}
    />
    <View
      stackPresentation="push"
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
          },
          undefined,
        ]
      }
    >
      <View
        style={
          Object {
            "elevation": 2,
            "shadowColor": "rgba(0, 0, 0, 1)",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 0.12,
            "shadowRadius": 1.5,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "#F8F9FF",
                "borderRadius": 4,
                "overflow": "hidden",
              },
              Object {
                "height": 400,
                "width": 750,
              },
              Object {
                "borderRadius": 0,
                "height": 400,
                "width": "100%",
              },
            ]
          }
          testID="upload_image"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "height": "100%",
                "justifyContent": "center",
                "width": "100%",
              }
            }
          >
            <ActivityIndicator
              color="#A4A9B7"
              size="large"
              testID="loading_indicator"
            />
          </View>
        </View>
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#F8F9FF",
              "bottom": 0,
              "justifyContent": "center",
              "left": 0,
              "opacity": 1,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
          testID="button_wrapper"
        >
          <View
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={false}
            hitSlop={
              Object {
                "bottom": 10,
                "left": 10,
                "right": 10,
                "top": 10,
              }
            }
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "flexDirection": "row",
                  },
                  undefined,
                  Object {
                    "backgroundColor": undefined,
                  },
                ]
              }
            >
              <View
                style={
                  Array [
                    undefined,
                    undefined,
                    undefined,
                  ]
                }
              >
                <View />
              </View>
            </View>
          </View>
          <Text
            style={
              Array [
                Object {
                  "color": "#212745",
                  "fontFamily": "BeVietnamPro-Medium",
                  "fontSize": 15,
                },
                Object {},
                Object {
                  "color": "#007AFF",
                  "marginTop": 12,
                },
              ]
            }
          >
            + Add cover
          </Text>
        </View>
      </View>
    </View>
  </RNSScreen>
</RNSScreenStack>
`;

exports[`CreateArticleCover should render correctly if cover is not empty 1`] = `
<RNSScreenStack
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNSScreen
    collapsable={false}
    forwardedRef={[Function]}
    gestureResponseDistance={
      Object {
        "bottom": -1,
        "end": -1,
        "start": -1,
        "top": -1,
      }
    }
    nativeBackButtonDismissalEnabled={false}
    onAppear={[Function]}
    onDisappear={[Function]}
    onDismissed={[Function]}
    onHeaderBackButtonClicked={[Function]}
    onTransitionProgress={[Function]}
    onWillAppear={[Function]}
    onWillDisappear={[Function]}
    replaceAnimation="pop"
    stackPresentation="push"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    swipeDirection="horizontal"
  >
    <RNSScreenStackHeaderConfig
      backgroundColor="rgb(255, 255, 255)"
      color="rgb(0, 122, 255)"
      hidden={false}
      onAttached={[Function]}
      onDetached={[Function]}
      title="MockedScreen"
      titleColor="rgb(28, 28, 30)"
      topInsetEnabled={true}
      translucent={false}
    />
    <View
      stackPresentation="push"
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
          },
          undefined,
        ]
      }
    >
      <View
        style={
          Object {
            "elevation": 2,
            "shadowColor": "rgba(0, 0, 0, 1)",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 0.12,
            "shadowRadius": 1.5,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "backgroundColor": "#F8F9FF",
                "borderRadius": 4,
                "overflow": "hidden",
              },
              Object {
                "height": 400,
                "width": 750,
              },
              Object {
                "borderRadius": 0,
                "height": 400,
                "width": "100%",
              },
            ]
          }
          testID="upload_image"
        >
          <View
            style={
              Array [
                Object {
                  "overflow": "hidden",
                },
                Object {
                  "height": "100%",
                  "width": "100%",
                },
              ]
            }
          >
            <FastImageView
              onFastImageError={[Function]}
              resizeMode="cover"
              source={
                Object {
                  "uri": "https://bic-dev-user-upload-images-s3-bucket.s3.ap-southeast-1.amazonaws.com/post/original/fa2a7cde-eee0-4c09-9784-45e1c1ef7e6b.png",
                }
              }
              style={
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                }
              }
            />
          </View>
        </View>
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "bottom": 0,
              "left": 0,
              "opacity": 1,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
          testID="button_wrapper"
        >
          <View
            style={
              Object {
                "position": "absolute",
                "right": 16,
                "top": 12,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#F1F2F8",
                    "borderRadius": 12,
                    "height": 24,
                    "justifyContent": "center",
                    "width": 24,
                  },
                  Object {
                    "backgroundColor": "#FFFFFF",
                  },
                ]
              }
            >
              <View
                accessibilityState={
                  Object {
                    "disabled": true,
                  }
                }
                accessible={true}
                collapsable={false}
                focusable={false}
                hitSlop={
                  Object {
                    "bottom": 10,
                    "left": 10,
                    "right": 10,
                    "top": 10,
                  }
                }
                onClick={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "opacity": 1,
                  }
                }
              >
                <View
                  style={
                    Array [
                      Object {
                        "alignItems": "center",
                        "flexDirection": "row",
                      },
                      undefined,
                      Object {
                        "backgroundColor": undefined,
                      },
                    ]
                  }
                >
                  <View
                    style={
                      Array [
                        undefined,
                        undefined,
                        undefined,
                      ]
                    }
                  >
                    <View />
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNSScreen>
</RNSScreenStack>
`;
