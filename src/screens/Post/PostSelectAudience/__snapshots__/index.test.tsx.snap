// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostSelectAudience screen renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
    }
  }
>
  <View
    testID="header"
  >
    <View
      animatedStyle={
        Object {
          "value": Object {
            "height": 60,
          },
        }
      }
      collapsable={false}
      style={
        Object {
          "alignItems": "flex-end",
          "backgroundColor": "#FFFFFF",
          "borderBottomWidth": 0.5,
          "borderColor": "#EAEDF2",
          "elevation": 2,
          "flexDirection": "row",
          "height": 60,
          "overflow": "hidden",
          "paddingTop": 0,
          "shadowColor": "#000",
          "shadowOffset": Object {
            "height": 1,
            "width": 0,
          },
          "shadowOpacity": 0.1,
          "shadowRadius": 1,
        }
      }
      testID="header.content"
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "flex": 1,
            "flexDirection": "row",
            "height": 60,
            "overflow": "hidden",
            "paddingLeft": 8,
            "paddingRight": 8,
          }
        }
      >
        <View
          accessibilityState={
            Object {
              "disabled": false,
            }
          }
          accessible={true}
          focusable={true}
          hitSlop={
            Object {
              "bottom": 20,
              "left": 20,
              "right": 20,
              "top": 20,
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="header.back.button"
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "flexDirection": "row",
                },
                Object {
                  "alignItems": "center",
                  "height": 48,
                  "justifyContent": "center",
                  "padding": 12,
                  "width": 48,
                },
                Object {
                  "backgroundColor": undefined,
                },
              ]
            }
          >
            <View
              style={
                Array [
                  undefined,
                  undefined,
                  undefined,
                ]
              }
            >
              <View
                className="icon-wrapper"
                testID="header.back"
              >
                <RNSVGSvgView
                  align="xMidYMid"
                  bbHeight={24}
                  bbWidth={24}
                  fill="#2F3945"
                  focusable={false}
                  height={24}
                  meetOrSlice={0}
                  minX={0}
                  minY={0}
                  style={
                    Array [
                      Object {
                        "backgroundColor": "transparent",
                        "borderWidth": 0,
                      },
                      Object {},
                      Object {
                        "flex": 0,
                        "height": 24,
                        "width": 24,
                      },
                    ]
                  }
                  vbHeight={24}
                  vbWidth={24}
                  width={24}
                >
                  <RNSVGGroup
                    fill={4281284933}
                    propList={
                      Array [
                        "fill",
                      ]
                    }
                  >
                    <RNSVGPath
                      d="M8.5,12.8l5.7,5.6c0.4,0.4,1,0.4,1.4,0c0,0,0,0,0,0c0.4-0.4,0.4-1,0-1.4l-4.9-5l4.9-5c0.4-0.4,0.4-1,0-1.4c-0.2-0.2-0.4-0.3-0.7-0.3c-0.3,0-0.5,0.1-0.7,0.3l-5.7,5.6C8.1,11.7,8.1,12.3,8.5,12.8C8.5,12.7,8.5,12.7,8.5,12.8z"
                    />
                  </RNSVGGroup>
                </RNSVGSvgView>
              </View>
            </View>
          </View>
        </View>
        <View
          style={
            Object {
              "flex": 1,
              "height": "100%",
              "justifyContent": "center",
              "marginLeft": 16,
              "paddingTop": 1.5,
            }
          }
        >
          <View
            accessibilityState={
              Object {
                "disabled": true,
              }
            }
            accessible={true}
            focusable={false}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Object {
                  "color": "#2F3945",
                  "fontFamily": "OpenSans-SemiBold",
                  "fontSize": 16,
                  "height": 24,
                  "lineHeight": 24,
                }
              }
              testID="header.text"
            >
              Select Audiences
            </Text>
          </View>
        </View>
        <View
          accessibilityState={
            Object {
              "disabled": true,
            }
          }
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "#D5DCE5",
              "borderColor": "#7843DD",
              "borderRadius": 6,
              "borderWidth": 0,
              "height": 40,
              "marginRight": 4,
              "padding": 8,
            }
          }
          testID="select_audience.btn_done"
        >
          <View
            style={
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "justifyContent": "center",
              }
            }
            testID="button_wrapper.content"
          >
            <Text
              style={
                Object {
                  "color": "#B2BDCD",
                  "fontFamily": "OpenSans-SemiBold",
                  "fontSize": 16,
                  "textAlign": "center",
                }
              }
              testID="header.button.text"
            >
              Done
            </Text>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "backgroundColor": "#FFFFFF",
            "height": 0,
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
      />
    </View>
  </View>
  <View
    style={
      Object {
        "backgroundColor": "#EAEDF2",
        "borderRadius": 20,
        "height": 40,
        "justifyContent": "center",
        "margin": 12,
        "paddingHorizontal": 16,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
        }
      }
    >
      <View
        accessibilityState={
          Object {
            "disabled": true,
          }
        }
        accessible={true}
        focusable={false}
        hitSlop={
          Object {
            "bottom": 10,
            "left": 10,
            "right": 10,
            "top": 10,
          }
        }
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
              },
              Object {
                "marginRight": 8,
              },
              Object {
                "backgroundColor": undefined,
              },
            ]
          }
        >
          <View
            style={
              Array [
                undefined,
                undefined,
                undefined,
              ]
            }
          >
            <View
              className="icon-wrapper"
            >
              <RNSVGSvgView
                align="xMidYMid"
                bbHeight={20}
                bbWidth={20}
                fill="#627286"
                focusable={false}
                height={20}
                meetOrSlice={0}
                minX={0}
                minY={0}
                style={
                  Array [
                    Object {
                      "backgroundColor": "transparent",
                      "borderWidth": 0,
                    },
                    Object {},
                    Object {
                      "flex": 0,
                      "height": 20,
                      "width": 20,
                    },
                  ]
                }
                vbHeight={24}
                vbWidth={24}
                width={20}
              >
                <RNSVGGroup
                  fill={4284641926}
                  propList={
                    Array [
                      "fill",
                    ]
                  }
                >
                  <RNSVGPath
                    d="M21.71,20.29,18,16.61A9,9,0,1,0,16.61,18l3.68,3.68a1,1,0,0,0,1.42,0A1,1,0,0,0,21.71,20.29ZM11,18a7,7,0,1,1,7-7A7,7,0,0,1,11,18Z"
                  />
                </RNSVGGroup>
              </RNSVGSvgView>
            </View>
          </View>
        </View>
      </View>
      <TextInput
        autoComplete="off"
        autoFocus={true}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Search for groups or people"
        placeholderTextColor="#627286"
        returnKeyType="search"
        selectionColor="#627286"
        style={
          Object {
            "color": "#2F3945",
            "flex": 1,
            "fontFamily": "OpenSans-Regular",
            "fontSize": 16,
            "height": "100%",
          }
        }
        testID="post_select_audience.search"
        value=""
      />
    </View>
  </View>
  <RCTScrollView
    ListEmptyComponent={[Function]}
    ListFooterComponent={[Function]}
    ListHeaderComponent={[Function]}
    data={Array []}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "paddingHorizontal": 16,
      }
    }
  >
    <View>
      <View
        onLayout={[Function]}
      />
      <View
        onLayout={[Function]}
      >
        <View>
          <ActivityIndicator
            color="#EAEDF2"
            size="large"
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
