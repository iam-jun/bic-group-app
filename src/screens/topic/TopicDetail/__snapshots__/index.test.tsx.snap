// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SeriesDetailArticleItem component render correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#EAEDF2",
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "zIndex": 2,
      }
    }
    testID="header"
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "flex-end",
            "backgroundColor": "#FFFFFF",
            "flexDirection": "row",
            "minHeight": 44,
            "paddingTop": 0,
            "paddingVertical": 4,
          },
          Object {
            "elevation": 2,
            "shadowColor": "rgba(0, 0, 0, 1)",
            "shadowOffset": Object {
              "height": 2,
              "width": 0,
            },
            "shadowOpacity": 0.12,
            "shadowRadius": 1.5,
          },
          undefined,
        ]
      }
      testID="header.content"
    >
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#FFFFFF",
            "flex": 1,
            "flexDirection": "row",
            "overflow": "hidden",
            "paddingLeft": 8,
            "paddingRight": 8,
          }
        }
      >
        <View
          accessibilityState={
            Object {
              "disabled": false,
            }
          }
          accessible={true}
          collapsable={false}
          focusable={true}
          hitSlop={
            Object {
              "bottom": 20,
              "left": 20,
              "right": 20,
              "top": 20,
            }
          }
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
            }
          }
          testID="header.back.button"
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "flexDirection": "row",
                },
                Object {
                  "alignItems": "center",
                  "height": 44,
                  "justifyContent": "center",
                  "padding": 12,
                  "width": 44,
                },
                Object {
                  "backgroundColor": undefined,
                },
              ]
            }
          >
            <View
              style={
                Array [
                  undefined,
                  undefined,
                  undefined,
                ]
              }
            >
              <View
                testID="header.back"
              />
            </View>
          </View>
        </View>
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "justifyContent": "center",
                "paddingVertical": 8,
              },
              Object {},
            ]
          }
        />
        <View
          accessible={true}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "borderRadius": 6,
              },
              undefined,
            ]
          }
          testID="header.rightIcon.button"
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "borderRadius": 6,
                  "elevation": 2,
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "shadowColor": "rgba(0, 0, 0, 1)",
                  "shadowOffset": Object {
                    "height": 2,
                    "width": 0,
                  },
                  "shadowOpacity": 0.12,
                  "shadowRadius": 1.5,
                },
                undefined,
                Object {
                  "backgroundColor": "#FFFFFF",
                  "height": 28,
                  "paddingHorizontal": 8,
                },
              ]
            }
            testID="button.content"
          >
            <View
              accessibilityState={
                Object {
                  "disabled": true,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={false}
              hitSlop={
                Object {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                    },
                    undefined,
                    Object {
                      "backgroundColor": undefined,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      undefined,
                      undefined,
                      undefined,
                    ]
                  }
                >
                  <View
                    testID="button.icon"
                  />
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "backgroundColor": "#FFFFFF",
            "height": 0,
            "position": "absolute",
            "top": 0,
            "width": "100%",
          }
        }
      />
    </View>
  </View>
  <RCTScrollView
    ListFooterComponent={[Function]}
    ListHeaderComponent={[Function]}
    data={Array []}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={0.2}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={true}
        tintColor="#A4A9B7"
      />
    }
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    viewabilityConfigCallbackPairs={Array []}
  >
    <RCTRefreshControl />
    <View>
      <View
        onLayout={[Function]}
      >
        <View
          style={
            Array [
              Object {
                "alignSelf": "stretch",
                "backgroundColor": "transparent",
                "height": 12,
                "marginHorizontal": 0,
                "width": undefined,
              },
              Object {},
            ]
          }
          testID="divider"
        />
      </View>
      <View
        onLayout={[Function]}
      >
        <View
          style={
            Array [
              Object {
                "alignSelf": "stretch",
                "backgroundColor": "transparent",
                "height": 16,
                "marginHorizontal": 0,
                "width": undefined,
              },
              Object {},
            ]
          }
          testID="divider"
        />
      </View>
    </View>
  </RCTScrollView>
</View>
`;
