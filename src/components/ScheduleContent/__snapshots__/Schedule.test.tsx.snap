// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Schedule should render correctly 1`] = `
<RNSScreenStack
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RNSScreen
    collapsable={false}
    forwardedRef={[Function]}
    gestureResponseDistance={
      Object {
        "bottom": -1,
        "end": -1,
        "start": -1,
        "top": -1,
      }
    }
    nativeBackButtonDismissalEnabled={false}
    onAppear={[Function]}
    onDisappear={[Function]}
    onDismissed={[Function]}
    onHeaderBackButtonClicked={[Function]}
    onTransitionProgress={[Function]}
    onWillAppear={[Function]}
    onWillDisappear={[Function]}
    replaceAnimation="pop"
    stackPresentation="push"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
    swipeDirection="horizontal"
  >
    <RNSScreenStackHeaderConfig
      backgroundColor="rgb(255, 255, 255)"
      color="rgb(0, 122, 255)"
      hidden={false}
      onAttached={[Function]}
      onDetached={[Function]}
      title="MockedScreen"
      titleColor="rgb(28, 28, 30)"
      topInsetEnabled={true}
      translucent={false}
    />
    <View
      stackPresentation="push"
      style={
        Array [
          Object {
            "flex": 1,
          },
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
          },
          undefined,
        ]
      }
    >
      <View
        style={
          Object {
            "marginRight": 8,
          }
        }
      >
        <View
          accessibilityState={
            Object {
              "disabled": true,
            }
          }
          accessible={true}
          focusable={false}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Array [
              Object {
                "borderRadius": 8,
              },
              undefined,
            ]
          }
          testID="button_wrapper"
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "borderRadius": 8,
                  "flexDirection": "row",
                  "justifyContent": "center",
                  "paddingVertical": 4,
                },
                undefined,
                Object {
                  "backgroundColor": "#F4EFFB",
                  "height": 36,
                  "paddingHorizontal": 12,
                },
              ]
            }
            testID="button.content"
          >
            <View
              accessibilityState={
                Object {
                  "disabled": true,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={false}
              hitSlop={
                Object {
                  "bottom": 10,
                  "left": 10,
                  "right": 10,
                  "top": 10,
                }
              }
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "opacity": 1,
                }
              }
            >
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                    },
                    undefined,
                    Object {
                      "backgroundColor": undefined,
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      undefined,
                      undefined,
                      undefined,
                    ]
                  }
                >
                  <View
                    testID="button.icon"
                  />
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RNSScreen>
</RNSScreenStack>
`;
